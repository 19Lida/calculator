import { useState } from "react";
import "./App.css";

function App() {
  const [display, setDisplay] = useState("0");
  const [prevValue, setPrevValue] = useState(null);
  const [operation, setOperation] = useState(null);
  const [overwrite, setOverwrite] = useState(false);
  const [expression, setExpression] = useState("");
  const [theme, setTheme] = useState(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —Ç–µ–º–∞ —É localStorage
    return localStorage.getItem("theme") || "dark";
  });

  // üß© –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–µ–º–∏
  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
  };

  // —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ü–∏—Ñ—Ä
  const appendNumber = (digit) => {
    //  overwrite = true –æ–∑–Ω–∞—á–∞—î ‚Äú–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏‚Äù –µ–∫—Ä–∞–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–º –≤–≤–µ–¥–µ–Ω–Ω—è–º
    if (overwrite) {
      setDisplay(digit);
      setOverwrite(false); //–ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∂–∏–º "–¥–æ–ø–∏—Å—É–≤–∞–Ω–Ω—è" –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É–π —á–∏—Å–ª–æ
    } else {
      setDisplay(display === "0" ? digit : display + digit);
    }

    // üîπ —â–æ–± –ø—Ä–∏ –Ω–∞–±–æ—Ä—ñ –¥—Ä—É–≥–æ–≥–æ —á–∏—Å–ª–∞ –∑–≤–µ—Ä—Ö—É –Ω–µ –∑–Ω–∏–∫–∞–≤ –≤–∏—Ä–∞–∑.
    // –î–æ–¥–∞—î–º–æ —á–∏—Å–ª–æ –¥–æ –≤–∏—Ä–∞–∑—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∂–µ —î –æ–ø–µ—Ä–∞—Ü—ñ—è
    if (prevValue !== null && operation !== null) {
      setExpression(
        `${prevValue} ${operation} ${overwrite ? digit : display + digit}`
      );
    } else {
      setExpression(display === "0" ? digit : display + digit);
    }
  };

  const chooseOperation = (op) => {
    // üü¢ –Ø–∫—â–æ —â–µ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ
    if (prevValue === null) {
      setPrevValue(display);
      setOperation(op);
      setExpression(`${display} ${op}`);
      setOverwrite(true); // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É–π –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏—Å–ª–æ
      return;
    }

    // üü¢ –Ø–∫—â–æ –º–∏ —â–æ–π–Ω–æ –≤–∏–±—Ä–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é —ñ –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤–µ —á–∏—Å–ª–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω—é—î–º–æ —ó—ó
    if (overwrite) {
      setOperation(op);
      setExpression(`${prevValue} ${op}`);
      return;
    }

    // üü¢ –Ü–Ω–∞–∫—à–µ –æ–±—á–∏—Å–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏—Ä–∞–∑
    const value = compute();
    setPrevValue(value);
    setDisplay(value);
    setOperation(op);
    setExpression(`${value} ${op}`);
    setOverwrite(true); // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É–π –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏—Å–ª–æ
  };

  const compute = () => {
    // console.log("üßÆ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è...");
    if (operation === null || prevValue === null) return display;

    const curr = parseFloat(display);
    const prev = parseFloat(prevValue);
    let result = 0;

    switch (operation) {
      case "+":
        result = prev + curr;
        break;
      case "-":
        result = prev - curr;
        break;
      case "*":
        result = prev * curr;
        break;
      case "/":
        result = curr !== 0 ? prev / curr : "Err";
        break;
      default:
        return display;
    }

    // console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
    return result.toString();
  };

  // –ù–∞—Ç–∏—Å–Ω—É–ª–∏ '='
  const handleEquals = () => {
    // console.log("üü∞ –ù–∞—Ç–∏—Å–Ω—É–ª–∏ '='");
    if (operation === null || prevValue === null) return;
    const value = compute();
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤–Ω–∏–π –≤–∏—Ä–∞–∑ –∑–≤–µ—Ä—Ö—É: 4 + 6 = 10
    setExpression(`${prevValue} ${operation} ${display} = ${value}`);
    // –û–Ω–æ–≤–ª—é—î–º–æ –µ–∫—Ä–∞–Ω
    setDisplay(value);
    setPrevValue(null); // –ø–æ—Ç–æ—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –æ—á–∏—â–∞—î—Ç—å—Å—è
    setOperation(null); // –ø–æ—Ç–æ—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –æ—á–∏—â–∞—î—Ç—å—Å—è
    setOverwrite(true); // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É–π –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏—Å–ª–æ
  };

  const clear = () => {
    // console.log("üßπ –û—á–∏—â–µ–Ω–Ω—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞");
    setDisplay("0");
    setPrevValue(null);
    setOperation(null);
    setExpression("");
    setOverwrite(false);
  };
  const handleBackspace = () => {
    if (overwrite) return; // —è–∫—â–æ —â–æ–π–Ω–æ –±—É–ª–æ "=" –∞–±–æ –æ–ø–µ—Ä–∞—Ü—ñ—è ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ
    if (display.length === 1) {
      setDisplay("0");
    } else {
      setDisplay(display.slice(0, -1));
    }

    // üîπ –æ–Ω–æ–≤–ª—é—î–º–æ –≤–∏—Ä–∞–∑ –∑–≤–µ—Ä—Ö—É
    if (prevValue !== null && operation !== null) {
      setExpression(`${prevValue} ${operation} ${display.slice(0, -1)}`);
    } else {
      setExpression(display.slice(0, -1));
    }
  };
  return (
    <div className={`app-container ${theme}`}>
      <div className="calculator">
        <div className="display">
          <div className="expression-line">
            {expression || `${prevValue ?? ""} ${operation ?? ""}`}
          </div>
          <div className="main-display">{display}</div>
        </div>

        <div className="buttons">
          <button onClick={clear} className="btn-clear">
            C
          </button>
          <button onClick={handleBackspace} className="backspace">
            ‚å´
          </button>
          <button
            className={operation === "/" ? "active" : ""}
            onClick={() => chooseOperation("/")}
          >
            √∑
          </button>
          <button
            className={operation === "*" ? "active" : ""}
            onClick={() => chooseOperation("*")}
          >
            √ó
          </button>
          <button onClick={() => appendNumber("7")}>7</button>
          <button onClick={() => appendNumber("8")}>8</button>
          <button onClick={() => appendNumber("9")}>9</button>
          <button
            className={operation === "+" ? "active" : ""}
            onClick={() => chooseOperation("+")}
          >
            +
          </button>
          <button onClick={() => appendNumber("4")}>4</button>
          <button onClick={() => appendNumber("5")}>5</button>
          <button onClick={() => appendNumber("6")}>6</button>
          <button
            className={operation === "-" ? "active" : ""}
            onClick={() => chooseOperation("-")}
          >
            ‚àí
          </button>
          <button onClick={() => appendNumber("1")}>1</button>
          <button onClick={() => appendNumber("2")}>2</button>
          <button onClick={() => appendNumber("3")}>3</button>
          <button onClick={() => appendNumber(".")}>.</button>
          <button onClick={() => appendNumber("0")}>0</button>
          <button onClick={handleEquals} className="equals">
            =
          </button>
        </div>

        {/* üîπ –ü–æ–¥–æ–≤–≥–∞—Å—Ç–∞ –∫–Ω–æ–ø–∫–∞-–ø–µ—Ä–µ–º–∏–∫–∞—á —Ç–µ–º–∏ */}
        <div className="theme-toggle" onClick={toggleTheme}>
          <div
            className={`toggle-thumb ${theme === "light" ? "light" : "dark"}`}
          ></div>
        </div>
      </div>
    </div>
  );
}

export default App;
